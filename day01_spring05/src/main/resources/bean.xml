<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--spring中的依赖注入
        依赖注入：
            Dependency Injection
        IOC
            降低程序间的耦合 (依赖关系)
        依赖关系的管理
            以后都交给spring来维护
         在当前类中需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
         依赖关系的维护：
            就称之为依赖注入
         依赖注入
            能注入的数据： 三类
                基本类型和String
                其他bean类型 (在配置文件中或者注解配置过得bean)
                复杂类型/ 集合类型
            注入方式： 三种
                1： 构造函数
                2： 使用set方法
                3： 使用注解
      -->
    <!--<bean id="accountService"
          class="com.hefeng.service.impl.AccountServiceImpl"
          scope="prototype"
    ></bean>-->

    <!-- 构造函数注入
           使用的标签： constructor-arg
           标签出现的位置： bean标签的内部
           标签中的属性
                type: 用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
                index: 用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始
                name: 用于指定给构造函数中指定名称的参数赋值  (常用的)
                ======= 以上三个用于指定给构造函数中哪个参数赋值 ========
                value:  用于提供基本类型和String类型的数据
                ref:  用于指定其他的数据类型。它指的就是在spring的Ioc核心容器中出现过得bean对象
           特点/优势：
                在获取bean对象时，注入数据是必须得操作，否则对象无法创建成功。
           弊端：
                改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供
    -->

    <bean id="accountService"
          class="com.hefeng.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="test"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>

    <!--  配置一个日期对象 -->
    <bean id="now" class="java.util.Date"></bean>

    <!-- set方法注入    更常用
            涉及的标签： property
            出现的位置： bean标签的内部
            标签的属性
                name: 用于指定时所调用的set方法名称  (常用的)
                value:  用于提供基本类型和String类型的数据
                ref:  用于指定其他的数据类型。它指的就是在spring的Ioc核心容器中出现过得bean对象
            优点：
                创建对象时没有明确的限制，可以直接使用默认构造函数
            缺点：
                如果某个成员必须有值，获取对象时有可能set方法没有执行(set方法无法保证一定注入)。
    -->

    <bean id="accountService2" class="com.hefeng.service.impl.AccountServiceImpl2">
        <property name="name" value="TEST"></property>
        <property name="age" value="21"></property>
        <property name="birthday" ref="now"></property>
     </bean>

    <!-- 复杂(集合)类型的注入
            用于给List结构集合注入的标签
                list array set
            用于Map结构集合注入的标签:
                map  props
             结构相同，标签可以互换
     -->
    <bean id="accountService3" class="com.hefeng.service.impl.AccountServiceImpl3">
        <property name="myStrs">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>

        <property name="myList">
            <list>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </list>
        </property>

        <property name="mySet">
            <set>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </set>
        </property>

        <property name="myMap">
            <map>
                <entry key="testA" value="aaaa"></entry>
                <entry key="testB">
                    <value>BBB</value>
                </entry>
            </map>
        </property>

        <property name="myProps">
            <props>
                <prop key="testC">ccc</prop>
                <prop key="testD">ddd</prop>
            </props>
        </property>
    </bean>
</beans>